# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
player_score = 0
dealer_score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        # create Hand object
        self.cards = []
    
    def __str__(self):
        # return a string representation of a hand
        ans = "Hand contains "
        for card in self.cards:
            ans += str(card) + " "
        return ans
    
    def add_card(self, card):
        # add a card object to a hand
        return self.cards.append(card)
    
    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        # compute the value of the hand, see Blackjack video
        hand_value = 0
        contain_ace = False
        
        # calcuate 'A' as 1
        for card in self.cards:
            hand_value += VALUES[card.get_rank()]
            
            if(card.get_rank() == 'A'):
                contain_ace = True
        
        # decide whether 'A' should be count as 1 or 11 base on whether
        # hand + 10 will burst or not
        if(not contain_ace):
            return hand_value
        else:
            if hand_value + 10 <= 21:
                return hand_value + 10
            else:
                return hand_value
        
        
        
    def draw(self, canvas, pos):
        # draw a hand on the canvas, use the draw method for cards
        for card in self.cards:
            card.draw(canvas, pos)
            pos[0] += 80
        
# define deck class 
class Deck:
    def __init__(self):
        # create a Deck object
        self.cards = []
        for suit in SUITS:
            for rank in RANKS:
                self.cards.append(Card(suit,rank))

    
    def shuffle(self):
        # shuffle the deck 
        # use random.shuffle()
        random.shuffle(self.cards)
    
    def deal_card(self):
        # deal a card object from the deck
        return self.cards.pop(0)
    
    def __str__(self):
        # return a string representing the deck
        res = ""
        for card in self.cards:
            res += str(card) + " " 
        return "Deck contains " + res


#define event handlers for buttons
def deal():
    global outcome, in_play,deck, dealer_hand ,player_hand, dealer_score, player_score

    # your code goes here
    
    if(in_play):
        outcome = "Player loses because game is in process"
        dealer_score += 1
        in_play = False
    else:    
        # create a instance of Deck class and stored as global var as required
        deck = Deck()
        # shuffle the deck
        deck.shuffle()

        # create a instance of Hand class for dealer
        dealer_hand = Hand()

        # create a instance of Hand class for player
        player_hand = Hand()

        # two cards for dealer
        dealer_hand.add_card(deck.deal_card())
        dealer_hand.add_card(deck.deal_card())

        # two cards for player
        player_hand.add_card(deck.deal_card())
        player_hand.add_card(deck.deal_card())
    
        in_play = True

def hit():
    # replace with your code below
 
    # if the hand is in play, hit the player
   
    # if busted, assign a message to outcome, update in_play and score
    
    global in_play, outcome, dealer_score
    if in_play:
        # if current value of player_hand is less than or equal to 21
        # add one more card to player hand
        if player_hand.get_value() <= 21:
            player_hand.add_card(deck.deal_card())
            print "Player " + str(player_hand)

            
#    		this way is too complicated
#            if player_hand.get_value() + VALUES[deck.deal_card().get_rank()] > 21:
#            	outcome = "You have busted"
#                in_player = False
#                print "You have busted"
        
        # after add one more card, we call get_value to obtain new value
        if player_hand.get_value() > 21:
            outcome = "You have busted. Dealer wins!"
            dealer_score += 1
            in_play = False
            print "You have busted"
    
def stand():
   
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more

    # assign a message to outcome, update in_play and score
    global outcome, in_play, dealer_score, player_score
    
    # after player click stand, we set in_play to False, so player's activity is stopped
    
    
    # now dealer will keep hitting until it satisfy below condition
    # each time we add a card, we call dealer_value
    # 1. dealer busts
    # 2. has value 17 or more
    # 		if player value > dealer value: 
    #			player win
    #		else:
    #			dealer wins
    in_play = False
    
    while(dealer_hand.get_value() <= 17):
        dealer_hand.add_card(deck.deal_card())
        
        if(dealer_hand.get_value() > 21):
            outcome = "Dealer busted. Player wins"
            player_score += 1
            break
        else:
            if(player_hand.get_value() > dealer_hand.get_value()):
                outcome = "Player wins."
                player_score += 1
                print "Player wins"
            else:
                outcome = "Dealer wins"
                dealer_score += 1
                print "Dealer wins"
    
    
# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    # card = Card("S", "A")
    # card.draw(canvas, [300, 300])
    canvas.draw_text("Blackjack", [220, 50], 50 ,"Pink")

    player_hand.draw(canvas, [100, 300])
    dealer_hand.draw(canvas, [100, 150])

    canvas.draw_text(outcome, [10, 120], 20 ,"Pink")

    canvas.draw_text("Dealer: %s" % dealer_score, [80, 80], 20 ,"Black")
    canvas.draw_text("Player: %s" % player_score, [180, 80], 20 ,"Black")

    if in_play:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, (136,199), CARD_BACK_SIZE)

    


# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric
