# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True

# ball position and ball verlocity
ball_pos = [0,0]
ball_vel = [0,0]

# paddles position and paddles velocity
paddle1_pos = 200
paddle2_pos = 200
paddle1_vel = 0
paddle2_vel = 0

score1 = 0
score2 = 0


# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    x = random.randrange(2,4)
    y = random.randrange(1,3)
    if(direction == RIGHT):
        ball_vel = [x,-y]
    elif(direction == LEFT):
        ball_vel = [-x, -y]
    
# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    paddle1_pos = 200
    paddle2_pos = 200
    paddle1_vel = 0
    paddle2_vel = 0
    score1 = 0
    score2 = 0
    
    random_direction = random.choice([LEFT, RIGHT])
    spawn_ball(random_direction)
    
def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel, paddle1_vel, paddle2_vel
    
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    if(ball_pos[1] <= BALL_RADIUS or ball_pos[1] >= HEIGHT - BALL_RADIUS):
        ball_vel[1] = -ball_vel[1]   

    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 2, "Red", "White")
    
    # update paddle's vertical position, keep paddle on the screen
    if(paddle1_pos + paddle1_vel < HALF_PAD_HEIGHT):
        paddle1_vel = 0
    elif(paddle1_pos + paddle1_vel> HEIGHT - HALF_PAD_HEIGHT):
        paddle1_vel = 0
    else:
        paddle1_pos += paddle1_vel
    
    if(paddle2_pos + paddle2_vel < HALF_PAD_HEIGHT):
        paddle2_vel = 0
    elif(paddle2_pos + paddle2_vel> HEIGHT - HALF_PAD_HEIGHT):
        paddle2_vel = 0
    else:
        paddle2_pos += paddle2_vel
    
    
    
    # draw paddles
    canvas.draw_polygon([(0,paddle1_pos - HALF_PAD_HEIGHT),(PAD_WIDTH,paddle1_pos - HALF_PAD_HEIGHT),(PAD_WIDTH,paddle1_pos + HALF_PAD_HEIGHT),(0,paddle1_pos + HALF_PAD_HEIGHT)], 1, 'Grey',"Grey")
    
    canvas.draw_polygon([(WIDTH,paddle2_pos - HALF_PAD_HEIGHT),(WIDTH - PAD_WIDTH,paddle2_pos -HALF_PAD_HEIGHT),(WIDTH - PAD_WIDTH,paddle2_pos + HALF_PAD_HEIGHT),(WIDTH,paddle2_pos + HALF_PAD_HEIGHT)], 1, 'Grey',"Grey")
    
    # determine whether paddle and ball collide    
    # check left gutter
    if(ball_pos[0] <= PAD_WIDTH + BALL_RADIUS):
        if(ball_pos[1] <= paddle1_pos + HALF_PAD_HEIGHT and ball_pos[1] >= paddle1_pos - HALF_PAD_HEIGHT):
            ball_vel[0] = -ball_vel[0] * 1.1
            ball_vel[1] = ball_vel[1] * 1.1
        else:
            score2 += 1
            spawn_ball(RIGHT)
    
    # check right gutter           
    if(ball_pos[0] >= WIDTH - PAD_WIDTH - BALL_RADIUS):
        if(ball_pos[1] <= paddle2_pos + HALF_PAD_HEIGHT and ball_pos[1] >= paddle2_pos - HALF_PAD_HEIGHT):
            ball_vel[0] = -ball_vel[0] * 1.1
            ball_vel[1] = ball_vel[1] * 1.1    
        else:
            score1 += 1
            spawn_ball(LEFT)
    
    # draw scores
    canvas.draw_text(str(score1), (200,50), 50, "Red")
    canvas.draw_text(str(score2), (400,50), 50, "Red")

# Reset button handler
def reset():
    new_game()

def pause():
    global ball_vel
    ball_vel = [0, 0]
    
    
def keydown(key):
    global paddle1_vel, paddle2_vel

    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = -8
    if key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 8   
    
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel = -8
    if key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 8
        
def keyup(key):
    global paddle1_vel, paddle2_vel
    paddle1_vel = 0
    paddle2_vel = 0

   
    
# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Pause", pause, 100)
frame.add_button("Reset", reset, 100)

# start frame
new_game()
frame.start()
